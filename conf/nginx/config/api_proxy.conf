#默认情况下，nginx不会将代理服务器的响应中的标头字段“ Date”，“ Server”，“ X-Pad”和“ X-Accel #-...”
#传递给客户端。该proxy_hide_header指令设置了不会传递的其他字段。
#相反，如果需要允许传递字段，则可以使用proxy_pass_header指令。
#允许传递Server响应头给客户端
proxy_pass_header Server;
#添加响应头
proxy_set_header Host $http_host;
#定义用于从代理服务器读取响应的超时，如果代理服务器在此时间内未传输任何内容，则连接将关闭。
#proxy_socket_keepalive on;
#处理请求相关
# 设置http版本为1.1,这个选项和长连接相关(keep_alive)
proxy_http_version 1.1;                         
#是否将原始请求头传递到服务器，这里可以做一些安全性设置
proxy_pass_request_headers on;
#是否将原始请求正文传递到服务器，这里可以做一些安全性设置
proxy_pass_request_body on;
#启用缓冲后， 在将请求发送到代理服务器之前，将从客户端读取整个请求正文 。
#禁用缓冲后，请求主体将在收到请求后立即发送到代理服务器。在这种情况下， #如果nginx已经开始发送请求正文，则该请求无法传递到 下一个服务器。
proxy_request_buffering on;
#与upstream server的连接超时时间（没有单位，最大不可以超过75s）
proxy_connect_timeout 15s;      
#nginx会等待多长时间来获得请求的响应 
proxy_read_timeout 60s;  
#发送请求给upstream服务器的超时时间            
proxy_send_timeout 12s; 
#如果需要修改从被代理服务器传来的应答头中的"Location"和"Refresh"字段，
#这时候就可以用proxy_redirect这个指令设置。default代表使用servername+匹配到的localtion
proxy_redirect default;
#设置header
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Scheme $scheme;
# 设置Connection为长连接（默认为no), keep_alive
# https://www.cnblogs.com/liuxia912/p/11075630.html
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $connection_upgrade;  

#反向代理缓冲区设置
#为了使该参数起作用，通常必须使用超级用户特权运行nginx worker进程
#启用缓冲后，nginx会尽快从代理服务器收到响应，
#并将其保存到proxy_buffer_size和proxy_buffers指令设置的缓冲区中 。
#如果整个响应都无法容纳到内存中，则可以将一部分响应保存到磁盘上的临时文件中。
#https://www.shuzhiduo.com/A/GBJr0Qe9d0/
#写入临时文件由 proxy_max_temp_file_size和 proxy_temp_file_write_size指令控制
proxy_buffering on;
#禁用缓冲后，响应一收到就立即同步传递到客户端。
#nginx不会尝试从代理服务器读取整个响应。
#设置从被代理服务器读取的第一部分应答的缓冲区大小。通常这部分代表的是响应头，服务器响应头缓冲区大小
#无论proxy_buffering是否开启，proxy_buffer_size都是生效的
proxy_buffer_size 4096;
#设置其他部分的缓冲区大小，一般这部分代表的响应体,这部分按需创建，所以放大点
proxy_buffers 256 4096;
#这个区域专门用来存放当前和客户端交互的服务器返回数据，是以上两个缓冲区的一部分，
#如果区域满了就立即返回给客户端
#一般设置为两个proxy_buffers单独缓冲区域的大小
proxy_busy_buffers_size 8192;
#如果整个响应都无法容纳到内存中，则可以将一部分响应保存到磁盘上的临时文件中。
#同时写入临时文件信息的大小
proxy_temp_file_write_size 8192;
#临时文件的总大小，这里采用默认值
proxy_max_temp_file_size 1000m;

#反向代理缓存相关
#设置一个缓存空间名
proxy_cache nginx_proxy_zone;
proxy_cache_convert_head on;
#缓存键值,保证每个用户都不一样
proxy_cache_key $host$uri$is_args$args$cookie_us_user_cookie;
# 默认post请求不会缓存
proxy_cache_methods GET HEAD;
#指定一个文件至少需要被用户访问多少次以后，才会被缓存
proxy_cache_min_uses 2;
#设置缓存时间,主要防止一下并发，从用户角度来看，1秒钟之内读取完再刷新的信息不值得展示
proxy_cache_valid 301 1s;
proxy_cache_valid 200 1s;
proxy_cache_valid any 1s;
#proxy_cache_purge $purge_method;
#proxy_cache_purge  cache_one $host$1$is_args$args;

#优化相关
#比如服务器正在更新 (updating) 缓存的时候，或者遭遇 503 服务不可用错误的时候，
#勉予使用 (inactive 还未清理的) 过期缓存，以保持可用性。
proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
#允许先返回缓存内容，然后在后台更新，异步更新操作
#proxy_cache_background_update on;
#对同一资源，未命中一次只回源一次，阻塞后续请求直至当前请求完成,用于解决缓存雪崩时候大量请求涌入的情况
#将对nginx传来之 Etag 或 Last-Modified 作出验证，
#若服务端资源没有变化，则使用“稍早前”缓存页面，无论其有效期为何。有助减少回源次数。
proxy_cache_revalidate on;
#在一个请求回原的时候，其他请求等待
proxy_cache_lock on; 
#如果当前请求迟迟未完成，放行后面请求
proxy_cache_lock_age 5s;
#发生超时，同样放行，但不作缓存。
proxy_cache_lock_timeout 5s;

#设置该页面不缓存
#proxy_no_cache $nocache;
reset_timedout_connection on;

#确定当客户端在不等待响应的情况下关闭连接时，是否应关闭与代理服务器的连接。
proxy_ignore_client_abort on;	