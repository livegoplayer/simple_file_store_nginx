#传输相关配置

#启用gzip#
gzip on;
gzip_static on; # to serve pre-gzipped version
#预设缓存区块的大小和数量
gzip_buffers 16 8k;
#压缩机别，折中6，如果网络带宽不好适当调大
gzip_comp_level 6;
gzip_http_version 1.1;
#当返回值内容大于这个值才会压缩，单位是K，所以主要压缩页面而非接口
gzip_min_length 20;
#压缩所有满足条件的内容
gzip_proxied any;
#在请求头中附加内容
gzip_vary on;
#需要压缩的内容
gzip_types
text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml
text/javascript application/javascript application/x-javascript
text/x-json application/json application/x-web-app-manifest+json
text/css text/plain text/x-component
font/opentype application/x-font-ttf application/vnd.ms-fontobject
image/x-icon;
#不压缩的文件后缀
gzip_disable "MSIE [1-6]\.(?!.*SV1)";

#lingering_close启用后，这个配置项对于上传大文件很有用。
#当用户请求的Content-Length大于max_client_body_size配置时
#Nginx服务会立刻向用户发送413（Request entity too large）响应。
#但是，很多客户端可能不管413返回值，仍然持续不断地上传HTTP body，
#这时，经过了lingering_time设置的时间后，Nginx将不管用户是否仍在上传，都会把连接关闭掉。
lingering_close on;
lingering_timeout 5s;

#文件读取优化#
#添加文件扩展，是他们可以被nginx识别
#Nginx 会根据mime type定义的对应关系来告诉浏览器如何处理服务器传给浏览器的这个文件，是打开还是下载
#如果Web程序没设置，Nginx也没对应文件的扩展名，就用Nginx 里默认的 default_type定义的处理方式。     
include mime.types;
default_type application/octet-stream;
#开启文件传输缓冲
sendfile on;
#建立在两次读取操作之间，如果这段时间之后客户端什么都不做，则nginx将关闭连接。
send_timeout 20;
#必须在sendfile开启模式才有效，防止网路阻塞（将响应头和正文的开始部分一起发送，而不一个接一个的发送）
tcp_nopush on;
#禁用小数据包缓存策略，减少小数据包的网络延迟，在非web服务器模式下需要注意，网络可能因为小数据包饱和
tcp_nodelay on;
#大于4m的文件直接读取，不缓存
directio 4m;
#设置块大小
directio_alignment 512;